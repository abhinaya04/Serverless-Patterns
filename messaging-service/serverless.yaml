service: sqs-sns

provider:
  name: aws
  stage: dev
  region: us-east-1

functions:
  publisher:
    handler: publisher.handler
    environment:
      SQSqueueName: !Ref firstQueue
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - firstQueue
              - Arn
          batchSize: 10

  consumer:
    handler: consumer.handler
    environment:
      SQSqueueName: !Ref firstQueue
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - firstQueue
              - Arn
          batchSize: 10

resources:
  Resources: 
 
  ### PART ONE: Create SNS Topic and SQS Queues
 
    # Create our SNS Topic
    mySnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-my-sns-topic
 
    # Create our 'firstQueue' SQS queue
    firstQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-first-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - firstQueueDLQ
            - Arn
          maxReceiveCount: 3
 
    # Create our 'firstQueue' Dead Letter Queue SQS queue
    firstQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-first-queue-dlq
 
    # Create our 'secondQueue' SQS queue
    secondQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-second-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - secondQueueDLQ
            - Arn
          maxReceiveCount: 3
 
    # Create our 'secondQueue' Dead Letter Queue SQS queue
    secondQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-second-queue-dlq 
 
 
  ### PART TWO: Create SQS Queue Policies
 
    # Create our queue policy for the 'firstQueue'
    snsToFirstQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - firstQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref mySnsTopic
        Queues:
          - Ref: firstQueue
 
    # Create our queue policy for the 'secondQueue'
    snsToSecondQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - secondQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref mySnsTopic
        Queues:
          - Ref: secondQueue
 
 
  ### PART THREE: Subscribe our SQS Queues to our SNS Topic 
 
    # Create the subscription to the 'firstQueue'
    firstQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref mySnsTopic
        Endpoint: !GetAtt
          - firstQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
 
    # Create the subscription to the 'secondQueue'
    secondQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref mySnsTopic
        Endpoint: !GetAtt
          - secondQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'

      DlqAlarmEmail:
      Type: AWS::SNS::Topic
      Properties:
          Subscription:
              -   Endpoint: abhinayatrash@gmail.com
                  Protocol: email

      FirstQueueDlqAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: firstQueueDLQ-Alarm
            AlarmDescription: 'There are failed messages in the dead letter queue.'
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                -   Name: QueueName
                    Value: !GetAtt firstQueueDLQ.QueueName
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            Threshold: 0
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
                - !Ref DlqAlarmEmail

      SecondQueueDlqAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: secondQueueDLQ-Alarm
            AlarmDescription: 'There are failed messages in the dead letter queue.'
            Namespace: AWS/SQS
            MetricName: ApproximateNumberOfMessagesVisible
            Dimensions:
                -   Name: QueueName
                    Value: !GetAtt secondQueueDLQ.QueueName
            Statistic: Sum
            Period: 60
            EvaluationPeriods: 1
            Threshold: 0
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
                - !Ref DlqAlarmEmail



